// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  FREELANCER
  EMPLOYER
}

enum Country {
  UK
}

enum FreelancerType {
  DEVELOPERS
  DESIGNERS
  TESTERS
  PROJECT_MANAGERS
  DEVOPS_ENGINEERS
  BUSINESS_ANALYSTS
}

enum Currency {
  GBP
}

enum GigType {
  INDIVIDUAL
  TEAM
}

enum DeveloperSkill {
  JAVASCRIPT
  JAVA
  PYTHON
  GOLANG
}

enum DesignerSkill {
  PHOTOSHOP
  ILLUSTRATOR
  FIGMA
}

enum TesterSkill {
  POSTMAN
  CYPRESS
  JEST
}

enum ProjectManagerSkill {
  AGILE_METHODOLOGY
  PROJECT_PLANNING
}

enum DevOpsEngineerSkill {
  DOCKER
  KUBERNETES
}

enum BusinessAnalystSkill {
  REQUIREMENTS_ANALYSIS
  DATA_ANALYSIS
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role UserRole @default(EMPLOYER)

  accounts Account[]
  sessions Session[]

  profile Profile?
}

model Profile {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  description String    @default("")
  address     String    @default("")
  country     Country   @default(UK)
  city        String    @default("")
  phoneNumber String    @default("")
  dob         DateTime?
  zip         String    @default("")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gig {
  id    String @id @default(cuid())
  title String @default("")
}

// To be removed
model Temporary {
  id             String               @id @default(cuid())
  freelancerType FreelancerType
  a              DeveloperSkill
  b              DesignerSkill
  c              DevOpsEngineerSkill
  d              ProjectManagerSkill
  e              Currency
  f              GigType
  g              TesterSkill
  h              BusinessAnalystSkill
}

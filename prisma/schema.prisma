// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  FREELANCER
  EMPLOYER
}

enum Country {
  UK
}

enum FreelancerType {
  DEVELOPERS
  DESIGNERS
  TESTERS
  PROJECT_MANAGERS
  DEVOPS_ENGINEERS
  BUSINESS_ANALYSTS
}

enum GigType {
  INDIVIDUAL
  TEAM
}

enum SkillName {
  JAVASCRIPT
  JAVA
  PYTHON
  GOLANG
  PHOTOSHOP
  ILLUSTRATOR
  FIGMA
  POSTMAN
  CYPRESS
  JEST
  AGILE_METHODOLOGY
  PROJECT_PLANNING
  DOCKER
  KUBERNETES
  REQUIREMENTS_ANALYSIS
  DATA_ANALYSIS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role UserRole @default(EMPLOYER)

  accounts Account[]
  sessions Session[]

  profile           Profile?
  FreelancerProfile FreelancerProfile?
  cart              Cart?
}

model Profile {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  description String    @default("")
  address     String    @default("")
  country     Country   @default(UK)
  city        String    @default("")
  phoneNumber String    @default("")
  dob         DateTime?
  zip         String    @default("")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FreelancerProfile {
  id           String                       @id @default(cuid())
  user         User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String                       @unique
  type         FreelancerType
  gigs         Gig[]
  verified     Boolean
  skills       SkillsOnFreelancerProfiles[]
  bio          String                       @db.Text
  passportOrId String                       @default("")
  resumeOrCV   String                       @default("")
  linkedInURL  String                       @default("")
  githubURL    String                       @default("")
  portfolioURL String                       @default("")
}

model Cart {
  userId    String       @id @unique
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  gigs      GigsOnCart[]
}

model Gig {
  id                  String            @id @default(cuid())
  title               String            @default("")
  type                GigType
  description         String            @default("")
  freelancerProfile   FreelancerProfile @relation(fields: [freelancerProfileId], references: [id], onDelete: Cascade)
  freelancerProfileId String
  price               Decimal
  image               String
  searchTags          SkillsOnGigs[]
  carts               GigsOnCart[]
}

model Skill {
  name               SkillName                    @id @unique
  freelancerProfiles SkillsOnFreelancerProfiles[]
  gigs               SkillsOnGigs[]
}

model SkillsOnFreelancerProfiles {
  skill               Skill             @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName           SkillName
  FreelancerProfile   FreelancerProfile @relation(fields: [freelancerProfileId], references: [id], onDelete: Cascade)
  freelancerProfileId String

  @@id([skillName, freelancerProfileId])
}

model SkillsOnGigs {
  gig       Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId     String
  skill     Skill     @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName SkillName

  @@id([skillName, gigId])
}

model GigsOnCart {
  gig    Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId  String
  cart   Cart   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String

  @@id([gigId, userId])
}
